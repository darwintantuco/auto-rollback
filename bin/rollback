#!/usr/bin/env bash

ARGS=($@)
is_git_repo() {
  $(git rev-parse --is-inside-work-tree 2> /dev/null)
}

git_hooks_path=$(git rev-parse --show-toplevel)/.git/hooks

info() {
  echo "usage: rollback <flags>"
  echo ""
  echo "flags:"
  echo "  --enable      enable auto migrate on git checkout"
  echo "  --disable     disable auto migrate on git checkout"
  echo ""
  echo "supported apps:"
  echo "  rails"
}

generate_post_checkout() {
  cat << EOT > $git_hooks_path/post-checkout
#!/usr/bin/env sh

ROLLBACK=\$(git config --get rollback.status)
if [ \$ROLLBACK != "enabled" ]; then exit 0; fi
if [ \$3 == 0 ]; then exit 0; fi
if [ -d "db/migrate" ]; then
  # Compare HEAD and other branch, get unique migration versions
  versions="\$(git diff --name-only \$(git rev-parse --abbrev-ref \$1...\$2) db/migrate | grep -oE '\d{14}' )"
  # Reverse the order, revert starting from latest migration
  versions="\$(echo \$versions | awk '{ for (i=NF; i>1; i--) printf("%s ",\$i); print \$1; }')"
  for version in \$versions; do
    echo "Running bundle exec rake db:migrate:down VERSION=\$version"
    bundle exec rake db:migrate:down VERSION=\$version &> /dev/null
  done
  git checkout db/schema.rb
fi
}
EOT
  echo watttt
  chmod +x $git_hooks_path/post-checkout
}

handle_enable_flag() {
  git config --replace-all rollback.status enabled
}

handle_disable_flag() {
  git config --replace-all rollback.status disabled
}

is_rails_app() {
  grep 'rails' 'Gemfile' -s &> /dev/null
}

handle_invalid_apps() {
  if ! is_rails_app; then
    echo "app not supported"
    echo ""
    info
    exit 1
  fi
}

rollback_post_checkout_exist() {
  cat $git_hooks_path/post-checkout | grep ROLLBACK > /dev/null 2>&1
}

add_post_checkout() {
  if [ ! -f $git_hooks_path/post-checkout ]; then
    generate_post_checkout
  else
    if ! rollback_post_checkout_exist; then
      mv $git_hooks_path/post-checkout $git_hooks_path/post-checkout.old
      generate_post_checkout
    fi
  fi
}

check_args() {
  if [ "${ARGS[*]}" = "" ]; then
    info
    exit 0
  elif [ "${ARGS[*]}" = "--enable" ]; then
    handle_invalid_apps
    handle_enable_flag
    add_post_checkout
    exit 0
  elif [ "${ARGS[*]}" = "--disable" ]; then
    handle_invalid_apps
    handle_disable_flag
    add_post_checkout
    exit 0
  else
    echo rollback ${ARGS[*]} is invalid
    echo ""
    info
    exit 1
  fi
}

if is_git_repo; then
  check_args
else
  echo "rollback should be executed on a git repository"
  echo ""
  info
  exit 1
fi
