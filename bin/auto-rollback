#!/usr/bin/env bash

ARGS=($@)

is_git_repo() {
  $(git rev-parse --is-inside-work-tree 2> /dev/null)
}

git_hooks_path=$(git rev-parse --show-toplevel)/.git/hooks

info() {
  echo "usage: npx auto-rollback <commands>"
  echo ""
  echo "commands:"
  echo "  enable      enable auto migrate"
  echo "  disable     disable auto migrate"
  echo "  status      show rollback status"
}

generate_post_checkout() {
  cat << EOT > $git_hooks_path/post-checkout
#!/usr/bin/env bash

ROLLBACK=\$(git config --get rollback.status)
if [ \$ROLLBACK != "enabled" ]; then exit 0; fi
if [ \$3 == 0 ]; then exit 0; fi

# Checkout previous branch
git checkout \$1 db/migrate > /dev/null 2>&1

if ! [ -e db/migrate ]; then exit 0; fi

# Get migrations that only exist in previous branch
versions="\$(git diff --name-only --diff-filter=D \$1 \$2 db/migrate | grep -oE '\d{14}' )"

# Reverse the order, revert starting from latest migration
versions="\$(echo \$versions | awk '{ for (i=NF; i>1; i--) printf("%s ",\$i); print \$1; }')"

for version in \$versions; do
  echo "Running bundle exec rake db:migrate:down VERSION=\$version"
  bundle exec rake db:migrate:down VERSION=\$version &> /dev/null
done

# Undo all changes
git reset db/migrate -q
git clean -f db/migrate -q
git checkout db/schema.rb -q
EOT
  chmod +x $git_hooks_path/post-checkout
}

handle_enable_flag() {
  git config --replace-all rollback.status enabled
}

handle_disable_flag() {
  git config --replace-all rollback.status disabled
}

is_rails_app() {
  grep 'rails' 'Gemfile' -s &> /dev/null
}

handle_invalid_apps() {
  if ! is_rails_app; then
    echo "app not supported"
    echo ""
    info
    exit 1
  fi
}

rollback_post_checkout_exist() {
  cat $git_hooks_path/post-checkout | grep ROLLBACK > /dev/null 2>&1
}

add_post_checkout() {
  if [ ! -f $git_hooks_path/post-checkout ]; then
    generate_post_checkout
  else
    if ! rollback_post_checkout_exist; then
      mv $git_hooks_path/post-checkout $git_hooks_path/post-checkout.old
      generate_post_checkout
    fi
  fi
}

display_rollback_status() {
 status=$(git config --get rollback.status)
 echo ${status:-disabled}
}

check_args() {
  if [ "${ARGS[*]}" = "" ]; then
    info
    exit 0
  elif [ "${ARGS[*]}" = "status" ]; then
    handle_invalid_apps
    display_rollback_status
    exit 0
  elif [ "${ARGS[*]}" = "enable" ]; then
    handle_invalid_apps
    handle_enable_flag
    add_post_checkout
    exit 0
  elif [ "${ARGS[*]}" = "disable" ]; then
    handle_invalid_apps
    handle_disable_flag
    add_post_checkout
    exit 0
  else
    echo npx auto-rollback ${ARGS[*]} is invalid
    echo ""
    info
    exit 1
  fi
}

if is_git_repo; then
  check_args
else
  echo "npx auto-rollback should be executed on a git repository"
  exit 1
fi
